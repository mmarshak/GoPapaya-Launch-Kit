# encoding: utf-8
#
# Copyright 2016 Cluster Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import logging
import json
from datetime import datetime

from django import forms
from django.core import validators
from django.conf import settings


DOMAIN_VALIDATOR = validators.URLValidator(schemes=[''])

VALID_TLDS = set([
  # version 2016020800, last updated mon feb  8 07:07:01 2016 utc
  'aaa',
  'aarp',
  'abb',
  'abbott',
  'abogado',
  'ac',
  'academy',
  'accenture',
  'accountant',
  'accountants',
  'aco',
  'active',
  'actor',
  'ad',
  'adac',
  'ads',
  'adult',
  'ae',
  'aeg',
  'aero',
  'af',
  'afl',
  'ag',
  'agency',
  'ai',
  'aig',
  'airforce',
  'airtel',
  'al',
  'alibaba',
  'alipay',
  'allfinanz',
  'alsace',
  'am',
  'amica',
  'amsterdam',
  'analytics',
  'android',
  'ao',
  'apartments',
  'app',
  'apple',
  'aq',
  'aquarelle',
  'ar',
  'aramco',
  'archi',
  'army',
  'arpa',
  'arte',
  'as',
  'asia',
  'associates',
  'at',
  'attorney',
  'au',
  'auction',
  'audi',
  'audio',
  'author',
  'auto',
  'autos',
  'aw',
  'ax',
  'axa',
  'az',
  'azure',
  'ba',
  'baidu',
  'band',
  'bank',
  'bar',
  'barcelona',
  'barclaycard',
  'barclays',
  'bargains',
  'bauhaus',
  'bayern',
  'bb',
  'bbc',
  'bbva',
  'bcn',
  'bd',
  'be',
  'beats',
  'beer',
  'bentley',
  'berlin',
  'best',
  'bet',
  'bf',
  'bg',
  'bh',
  'bharti',
  'bi',
  'bible',
  'bid',
  'bike',
  'bing',
  'bingo',
  'bio',
  'biz',
  'bj',
  'black',
  'blackfriday',
  'bloomberg',
  'blue',
  'bm',
  'bms',
  'bmw',
  'bn',
  'bnl',
  'bnpparibas',
  'bo',
  'boats',
  'boehringer',
  'bom',
  'bond',
  'boo',
  'book',
  'boots',
  'bosch',
  'bostik',
  'bot',
  'boutique',
  'br',
  'bradesco',
  'bridgestone',
  'broadway',
  'broker',
  'brother',
  'brussels',
  'bs',
  'bt',
  'budapest',
  'bugatti',
  'build',
  'builders',
  'business',
  'buy',
  'buzz',
  'bv',
  'bw',
  'by',
  'bz',
  'bzh',
  'ca',
  'cab',
  'cafe',
  'cal',
  'call',
  'camera',
  'camp',
  'cancerresearch',
  'canon',
  'capetown',
  'capital',
  'car',
  'caravan',
  'cards',
  'care',
  'career',
  'careers',
  'cars',
  'cartier',
  'casa',
  'cash',
  'casino',
  'cat',
  'catering',
  'cba',
  'cbn',
  'cc',
  'cd',
  'ceb',
  'center',
  'ceo',
  'cern',
  'cf',
  'cfa',
  'cfd',
  'cg',
  'ch',
  'chanel',
  'channel',
  'chat',
  'cheap',
  'chloe',
  'christmas',
  'chrome',
  'church',
  'ci',
  'cipriani',
  'circle',
  'cisco',
  'citic',
  'city',
  'cityeats',
  'ck',
  'cl',
  'claims',
  'cleaning',
  'click',
  'clinic',
  'clinique',
  'clothing',
  'cloud',
  'club',
  'clubmed',
  'cm',
  'cn',
  'co',
  'coach',
  'codes',
  'coffee',
  'college',
  'cologne',
  'com',
  'commbank',
  'community',
  'company',
  'compare',
  'computer',
  'comsec',
  'condos',
  'construction',
  'consulting',
  'contact',
  'contractors',
  'cooking',
  'cool',
  'coop',
  'corsica',
  'country',
  'coupons',
  'courses',
  'cr',
  'credit',
  'creditcard',
  'creditunion',
  'cricket',
  'crown',
  'crs',
  'cruises',
  'csc',
  'cu',
  'cuisinella',
  'cv',
  'cw',
  'cx',
  'cy',
  'cymru',
  'cyou',
  'cz',
  'dabur',
  'dad',
  'dance',
  'date',
  'dating',
  'datsun',
  'day',
  'dclk',
  'de',
  'dealer',
  'deals',
  'degree',
  'delivery',
  'dell',
  'deloitte',
  'delta',
  'democrat',
  'dental',
  'dentist',
  'desi',
  'design',
  'dev',
  'diamonds',
  'diet',
  'digital',
  'direct',
  'directory',
  'discount',
  'dj',
  'dk',
  'dm',
  'dnp',
  'do',
  'docs',
  'dog',
  'doha',
  'domains',
  'doosan',
  'download',
  'drive',
  'dubai',
  'durban',
  'dvag',
  'dz',
  'earth',
  'eat',
  'ec',
  'edeka',
  'edu',
  'education',
  'ee',
  'eg',
  'email',
  'emerck',
  'energy',
  'engineer',
  'engineering',
  'enterprises',
  'epson',
  'equipment',
  'er',
  'erni',
  'es',
  'esq',
  'estate',
  'et',
  'eu',
  'eurovision',
  'eus',
  'events',
  'everbank',
  'exchange',
  'expert',
  'exposed',
  'express',
  'fage',
  'fail',
  'fairwinds',
  'faith',
  'family',
  'fan',
  'fans',
  'farm',
  'fashion',
  'fast',
  'feedback',
  'ferrero',
  'fi',
  'film',
  'final',
  'finance',
  'financial',
  'firestone',
  'firmdale',
  'fish',
  'fishing',
  'fit',
  'fitness',
  'fj',
  'fk',
  'flights',
  'florist',
  'flowers',
  'flsmidth',
  'fly',
  'fm',
  'fo',
  'foo',
  'football',
  'ford',
  'forex',
  'forsale',
  'forum',
  'foundation',
  'fox',
  'fr',
  'fresenius',
  'frl',
  'frogans',
  'frontier',
  'fund',
  'furniture',
  'futbol',
  'fyi',
  'ga',
  'gal',
  'gallery',
  'game',
  'garden',
  'gb',
  'gbiz',
  'gd',
  'gdn',
  'ge',
  'gea',
  'gent',
  'genting',
  'gf',
  'gg',
  'ggee',
  'gh',
  'gi',
  'gift',
  'gifts',
  'gives',
  'giving',
  'gl',
  'glass',
  'gle',
  'global',
  'globo',
  'gm',
  'gmail',
  'gmo',
  'gmx',
  'gn',
  'gold',
  'goldpoint',
  'golf',
  'goo',
  'goog',
  'google',
  'gop',
  'got',
  'gov',
  'gp',
  'gq',
  'gr',
  'grainger',
  'graphics',
  'gratis',
  'green',
  'gripe',
  'group',
  'gs',
  'gt',
  'gu',
  'gucci',
  'guge',
  'guide',
  'guitars',
  'guru',
  'gw',
  'gy',
  'hamburg',
  'hangout',
  'haus',
  'health',
  'healthcare',
  'help',
  'helsinki',
  'here',
  'hermes',
  'hiphop',
  'hitachi',
  'hiv',
  'hk',
  'hm',
  'hn',
  'hockey',
  'holdings',
  'holiday',
  'homedepot',
  'homes',
  'honda',
  'horse',
  'host',
  'hosting',
  'hoteles',
  'hotmail',
  'house',
  'how',
  'hr',
  'hsbc',
  'ht',
  'hu',
  'hyundai',
  'ibm',
  'icbc',
  'ice',
  'icu',
  'id',
  'ie',
  'ifm',
  'iinet',
  'il',
  'im',
  'immo',
  'immobilien',
  'in',
  'industries',
  'infiniti',
  'info',
  'ing',
  'ink',
  'institute',
  'insurance',
  'insure',
  'int',
  'international',
  'investments',
  'io',
  'ipiranga',
  'iq',
  'ir',
  'irish',
  'is',
  'iselect',
  'ist',
  'istanbul',
  'it',
  'itau',
  'iwc',
  'jaguar',
  'java',
  'jcb',
  'je',
  'jetzt',
  'jewelry',
  'jlc',
  'jll',
  'jm',
  'jmp',
  'jo',
  'jobs',
  'joburg',
  'jot',
  'joy',
  'jp',
  'jprs',
  'juegos',
  'kaufen',
  'kddi',
  'ke',
  'kfh',
  'kg',
  'kh',
  'ki',
  'kia',
  'kim',
  'kinder',
  'kitchen',
  'kiwi',
  'km',
  'kn',
  'koeln',
  'komatsu',
  'kp',
  'kpn',
  'kr',
  'krd',
  'kred',
  'kw',
  'ky',
  'kyoto',
  'kz',
  'la',
  'lacaixa',
  'lamborghini',
  'lamer',
  'lancaster',
  'land',
  'landrover',
  'lanxess',
  'lasalle',
  'lat',
  'latrobe',
  'law',
  'lawyer',
  'lb',
  'lc',
  'lds',
  'lease',
  'leclerc',
  'legal',
  'lexus',
  'lgbt',
  'li',
  'liaison',
  'lidl',
  'life',
  'lifeinsurance',
  'lifestyle',
  'lighting',
  'like',
  'limited',
  'limo',
  'lincoln',
  'linde',
  'link',
  'live',
  'living',
  'lixil',
  'lk',
  'loan',
  'loans',
  'lol',
  'london',
  'lotte',
  'lotto',
  'love',
  'lr',
  'ls',
  'lt',
  'ltd',
  'ltda',
  'lu',
  'lupin',
  'luxe',
  'luxury',
  'lv',
  'ly',
  'ma',
  'madrid',
  'maif',
  'maison',
  'makeup',
  'man',
  'management',
  'mango',
  'market',
  'marketing',
  'markets',
  'marriott',
  'mba',
  'mc',
  'md',
  'me',
  'med',
  'media',
  'meet',
  'melbourne',
  'meme',
  'memorial',
  'men',
  'menu',
  'meo',
  'mg',
  'mh',
  'miami',
  'microsoft',
  'mil',
  'mini',
  'mk',
  'ml',
  'mm',
  'mma',
  'mn',
  'mo',
  'mobi',
  'mobily',
  'moda',
  'moe',
  'moi',
  'mom',
  'monash',
  'money',
  'montblanc',
  'mormon',
  'mortgage',
  'moscow',
  'motorcycles',
  'mov',
  'movie',
  'movistar',
  'mp',
  'mq',
  'mr',
  'ms',
  'mt',
  'mtn',
  'mtpc',
  'mtr',
  'mu',
  'museum',
  'mutuelle',
  'mv',
  'mw',
  'mx',
  'my',
  'mz',
  'na',
  'nadex',
  'nagoya',
  'name',
  'navy',
  'nc',
  'ne',
  'nec',
  'net',
  'netbank',
  'network',
  'neustar',
  'new',
  'news',
  'nexus',
  'nf',
  'ng',
  'ngo',
  'nhk',
  'ni',
  'nico',
  'nikon',
  'ninja',
  'nissan',
  'nl',
  'no',
  'nokia',
  'norton',
  'nowruz',
  'np',
  'nr',
  'nra',
  'nrw',
  'ntt',
  'nu',
  'nyc',
  'nz',
  'obi',
  'office',
  'okinawa',
  'om',
  'omega',
  'one',
  'ong',
  'onl',
  'online',
  'ooo',
  'oracle',
  'orange',
  'org',
  'organic',
  'origins',
  'osaka',
  'otsuka',
  'ovh',
  'pa',
  'page',
  'pamperedchef',
  'panerai',
  'paris',
  'pars',
  'partners',
  'parts',
  'party',
  'pe',
  'pet',
  'pf',
  'pg',
  'ph',
  'pharmacy',
  'philips',
  'photo',
  'photography',
  'photos',
  'physio',
  'piaget',
  'pics',
  'pictet',
  'pictures',
  'pid',
  'pin',
  'ping',
  'pink',
  'pizza',
  'pk',
  'pl',
  'place',
  'play',
  'playstation',
  'plumbing',
  'plus',
  'pm',
  'pn',
  'pohl',
  'poker',
  'porn',
  'post',
  'pr',
  'praxi',
  'press',
  'pro',
  'prod',
  'productions',
  'prof',
  'promo',
  'properties',
  'property',
  'protection',
  'ps',
  'pt',
  'pub',
  'pw',
  'py',
  'qa',
  'qpon',
  'quebec',
  'quest',
  'racing',
  're',
  'read',
  'realtor',
  'realty',
  'recipes',
  'red',
  'redstone',
  'redumbrella',
  'rehab',
  'reise',
  'reisen',
  'reit',
  'ren',
  'rent',
  'rentals',
  'repair',
  'report',
  'republican',
  'rest',
  'restaurant',
  'review',
  'reviews',
  'rexroth',
  'rich',
  'ricoh',
  'rio',
  'rip',
  'ro',
  'rocher',
  'rocks',
  'rodeo',
  'room',
  'rs',
  'rsvp',
  'ru',
  'ruhr',
  'run',
  'rw',
  'rwe',
  'ryukyu',
  'sa',
  'saarland',
  'safe',
  'safety',
  'sakura',
  'sale',
  'salon',
  'samsung',
  'sandvik',
  'sandvikcoromant',
  'sanofi',
  'sap',
  'sapo',
  'sarl',
  'sas',
  'saxo',
  'sb',
  'sbs',
  'sc',
  'sca',
  'scb',
  'schaeffler',
  'schmidt',
  'scholarships',
  'school',
  'schule',
  'schwarz',
  'science',
  'scor',
  'scot',
  'sd',
  'se',
  'seat',
  'security',
  'seek',
  'select',
  'sener',
  'services',
  'seven',
  'sew',
  'sex',
  'sexy',
  'sfr',
  'sg',
  'sh',
  'sharp',
  'shell',
  'shia',
  'shiksha',
  'shoes',
  'show',
  'shriram',
  'si',
  'singles',
  'site',
  'sj',
  'sk',
  'ski',
  'skin',
  'sky',
  'skype',
  'sl',
  'sm',
  'smile',
  'sn',
  'sncf',
  'so',
  'soccer',
  'social',
  'softbank',
  'software',
  'sohu',
  'solar',
  'solutions',
  'sony',
  'soy',
  'space',
  'spiegel',
  'spreadbetting',
  'sr',
  'srl',
  'st',
  'stada',
  'star',
  'starhub',
  'statefarm',
  'statoil',
  'stc',
  'stcgroup',
  'stockholm',
  'storage',
  'studio',
  'study',
  'style',
  'su',
  'sucks',
  'supplies',
  'supply',
  'support',
  'surf',
  'surgery',
  'suzuki',
  'sv',
  'swatch',
  'swiss',
  'sx',
  'sy',
  'sydney',
  'symantec',
  'systems',
  'sz',
  'tab',
  'taipei',
  'taobao',
  'tatamotors',
  'tatar',
  'tattoo',
  'tax',
  'taxi',
  'tc',
  'tci',
  'td',
  'team',
  'tech',
  'technology',
  'tel',
  'telefonica',
  'temasek',
  'tennis',
  'tf',
  'tg',
  'th',
  'thd',
  'theater',
  'theatre',
  'tickets',
  'tienda',
  'tiffany',
  'tips',
  'tires',
  'tirol',
  'tj',
  'tk',
  'tl',
  'tm',
  'tmall',
  'tn',
  'to',
  'today',
  'tokyo',
  'tools',
  'top',
  'toray',
  'toshiba',
  'tours',
  'town',
  'toyota',
  'toys',
  'tr',
  'trade',
  'trading',
  'training',
  'travel',
  'travelers',
  'travelersinsurance',
  'trust',
  'trv',
  'tt',
  'tube',
  'tui',
  'tushu',
  'tv',
  'tw',
  'tz',
  'ua',
  'ubs',
  'ug',
  'uk',
  'unicom',
  'university',
  'uno',
  'uol',
  'us',
  'uy',
  'uz',
  'va',
  'vacations',
  'vana',
  'vc',
  've',
  'vegas',
  'ventures',
  'verisign',
  'versicherung',
  'vet',
  'vg',
  'vi',
  'viajes',
  'video',
  'villas',
  'vin',
  'vip',
  'virgin',
  'vision',
  'vista',
  'vistaprint',
  'viva',
  'vlaanderen',
  'vn',
  'vodka',
  'volkswagen',
  'vote',
  'voting',
  'voto',
  'voyage',
  'vu',
  'wales',
  'walter',
  'wang',
  'wanggou',
  'watch',
  'watches',
  'weather',
  'weatherchannel',
  'webcam',
  'weber',
  'website',
  'wed',
  'wedding',
  'weir',
  'wf',
  'whoswho',
  'wien',
  'wiki',
  'williamhill',
  'win',
  'windows',
  'wine',
  'wme',
  'work',
  'works',
  'world',
  'ws',
  'wtc',
  'wtf',
  'xbox',
  'xerox',
  'xin',
  'xn--11b4c3d',
  'xn--1qqw23a',
  'xn--30rr7y',
  'xn--3bst00m',
  'xn--3ds443g',
  'xn--3e0b707e',
  'xn--3pxu8k',
  'xn--42c2d9a',
  'xn--45brj9c',
  'xn--45q11c',
  'xn--4gbrim',
  'xn--55qw42g',
  'xn--55qx5d',
  'xn--6frz82g',
  'xn--6qq986b3xl',
  'xn--80adxhks',
  'xn--80ao21a',
  'xn--80asehdb',
  'xn--80aswg',
  'xn--8y0a063a',
  'xn--90a3ac',
  'xn--90ais',
  'xn--9dbq2a',
  'xn--9et52u',
  'xn--b4w605ferd',
  'xn--c1avg',
  'xn--c2br7g',
  'xn--cg4bki',
  'xn--clchc0ea0b2g2a9gcd',
  'xn--czr694b',
  'xn--czrs0t',
  'xn--czru2d',
  'xn--d1acj3b',
  'xn--d1alf',
  'xn--eckvdtc9d',
  'xn--efvy88h',
  'xn--estv75g',
  'xn--fhbei',
  'xn--fiq228c5hs',
  'xn--fiq64b',
  'xn--fiqs8s',
  'xn--fiqz9s',
  'xn--fjq720a',
  'xn--flw351e',
  'xn--fpcrj9c3d',
  'xn--fzc2c9e2c',
  'xn--g2xx48c',
  'xn--gecrj9c',
  'xn--h2brj9c',
  'xn--hxt814e',
  'xn--i1b6b1a6a2e',
  'xn--imr513n',
  'xn--io0a7i',
  'xn--j1aef',
  'xn--j1amh',
  'xn--j6w193g',
  'xn--jlq61u9w7b',
  'xn--kcrx77d1x4a',
  'xn--kprw13d',
  'xn--kpry57d',
  'xn--kpu716f',
  'xn--kput3i',
  'xn--l1acc',
  'xn--lgbbat1ad8j',
  'xn--mgb9awbf',
  'xn--mgba3a3ejt',
  'xn--mgba3a4f16a',
  'xn--mgbaam7a8h',
  'xn--mgbab2bd',
  'xn--mgbayh7gpa',
  'xn--mgbb9fbpob',
  'xn--mgbbh1a71e',
  'xn--mgbc0a9azcg',
  'xn--mgberp4a5d4ar',
  'xn--mgbpl2fh',
  'xn--mgbt3dhd',
  'xn--mgbtx2b',
  'xn--mgbx4cd0ab',
  'xn--mk1bu44c',
  'xn--mxtq1m',
  'xn--ngbc5azd',
  'xn--ngbe9e0a',
  'xn--node',
  'xn--nqv7f',
  'xn--nqv7fs00ema',
  'xn--nyqy26a',
  'xn--o3cw4h',
  'xn--ogbpf8fl',
  'xn--p1acf',
  'xn--p1ai',
  'xn--pbt977c',
  'xn--pgbs0dh',
  'xn--pssy2u',
  'xn--q9jyb4c',
  'xn--qcka1pmc',
  'xn--qxam',
  'xn--rhqv96g',
  'xn--s9brj9c',
  'xn--ses554g',
  'xn--t60b56a',
  'xn--tckwe',
  'xn--unup4y',
  'xn--vermgensberater-ctb',
  'xn--vermgensberatung-pwb',
  'xn--vhquv',
  'xn--vuq861b',
  'xn--wgbh1c',
  'xn--wgbl6a',
  'xn--xhq521b',
  'xn--xkc2al3hye2a',
  'xn--xkc2dl3a5ee0h',
  'xn--y9a3aq',
  'xn--yfro4i67o',
  'xn--ygbi2ammx',
  'xn--zfr164b',
  'xperia',
  'xxx',
  'xyz',
  'yachts',
  'yamaxun',
  'yandex',
  'ye',
  'yodobashi',
  'yoga',
  'yokohama',
  'youtube',
  'yt',
  'za',
  'zara',
  'zero',
  'zip',
  'zm',
  'zone',
  'zuerich',
  'zw',
])


def validate_email(email):
  if not email:
    return None

  validators.validate_email(email)

  email = email.strip()
  tld = email.split('.')[-1]
  if tld not in VALID_TLDS:
    raise forms.ValidationError('Invalid email address')

  return email.lower()

def clean_email(email):
  try:
    return validate_email(email)
  except forms.ValidationError:
    return None


def validate_domain(domain):
  if not domain:
    return None

  domain = domain.strip().lower()
  if domain[:8] == 'https://':
    domain = domain[8:]
  elif domain[:7] == 'http://':
    domain = domain[7:]

  if domain.endswith('/'):
    domain = domain[:-1]

  DOMAIN_VALIDATOR('://%s' % domain)

  # Allow "localhost" in dev mode for local testing.
  if settings.IS_PRODUCTION or domain != 'localhost':
    tld = domain.split('.')[-1]
    if tld not in VALID_TLDS:
      raise forms.ValidationError('Invalid domain')

  return domain


DISALLOWED_CSS_PROPERTIES = set([
  'behavior',
  '-moz-binding',
  '-o-link',
])

def _validate_css_rule(rule):
  if rule.type == rule.STYLE_RULE:
    for prop in rule.style:
      # Input is normalized into lowercase "url()" syntax so this check is good.
      if prop.name in DISALLOWED_CSS_PROPERTIES:
        raise forms.ValidationError('CSS parsing error: %s property is not allowed' % prop.name)
      if 'expression(' in prop.value:
        raise forms.ValidationError('CSS parsing error: expression()s are not allowed')
      if 'url(' in prop.value:
        raise forms.ValidationError('CSS parsing error: External url()s are not allowed')

  elif rule.type == rule.MEDIA_RULE:
    for subrule in rule.cssRules:
      _validate_css_rule(subrule)

  else:
    raise forms.ValidationError('CSS parsing error: Only top-level CSS rules allowed (%s)' % rule)

def validate_dumb_css(dumb_css):
  # NOTE: Import here to delay-load because it's a big package.
  import cssutils

  # NOTE: Use an array here because setting to a different object
  # with global does not work, need "nonlocal".
  fetched = []
  def _fetcher(url):
    fetched.append(url)
    return (None, u'')

  p = cssutils.CSSParser(loglevel=logging.CRITICAL, fetcher=_fetcher, raiseExceptions=True)
  try:
    sheet = p.parseString(dumb_css)
  except:
    raise forms.ValidationError('CSS parsing error: Invalid syntax')

  if fetched:
    raise forms.ValidationError('CSS parsing error: @import is not allowed')

  for rule in sheet:
    _validate_css_rule(rule)

  # Outputs the parsed/normalized version of the sheet.
  return sheet.cssText


class LKCSSField(forms.CharField):
  def clean(self, css_text):
    css_text = super(LKCSSField, self).clean(css_text)
    if css_text and css_text.strip():
      return validate_dumb_css(css_text)
    return None


class NonblankListField(forms.MultipleChoiceField):
  def valid_value(self, value):
    return bool(value)


class LKPasswordField(forms.CharField):
  def clean(self, password):
    password = super(LKPasswordField, self).clean(password)
    if not (password and password.strip()):
      raise forms.ValidationError('Password cannot be blank', code='password-too-short')
    if not len(password) >= 6:
      raise forms.ValidationError('Password should be at least 6 letters', code='password-too-short')
    if len(set(password)) < 3:
      raise forms.ValidationError('Password needs more, different letters',
          code='weak-password')
    return password


class LKSingleLineCharField(forms.CharField):
  def clean(self, value):
    value = super(LKSingleLineCharField, self).clean(value)
    if value:
      value = value.strip()
      if '\n' in value or '\r' in value:
        raise forms.ValidationError('May not span multiple lines')
    return value


class JSONField(forms.CharField):
  def clean(self, json_text):
    obj = None
    json_text = super(JSONField, self).clean(json_text)
    if json_text:
      try:
        obj = json.loads(json_text)
      except ValueError:
        raise forms.ValidationError('Invalid JSON blob.')
      if not isinstance(obj, dict):
        raise forms.ValidationError('Invalid JSON blob: Please provide a JSON object.')
    return obj


class LKEmailField(forms.CharField):
  def clean(self, email):
    email = super(LKEmailField, self).clean(email)
    return validate_email(email)


class LKDomainField(forms.CharField):
  def clean(self, domain):
    domain = super(LKDomainField, self).clean(domain)
    return validate_domain(domain)


class LKBooleanField(forms.CharField):
  def clean(self, value):
    value = value or ''
    if isinstance(value, bool):
      return value
    if value.lower() in ('false', '0'):
      return False
    return bool(value)


class LKDateTimeField(forms.DateTimeField):
  def to_python(self, value):
    try:
      timestamp = float(value)
      return datetime.fromtimestamp(timestamp)
    except (TypeError, ValueError):
      pass
    return super(LKDateTimeField, self).to_python(value)


class LKEncryptedIdReferenceListField(forms.RegexField):
  def __init__(self, model_klass, for_update=False, filter_params=None, max_length=1, **kwargs):
    self.for_update = for_update
    self.filter_params = filter_params or {}
    self.model_klass = model_klass
    kwargs['regex'] = r'^[\w-]{11}(,[\w-]{11}){,%s}$' % (max_length - 1)
    super(LKEncryptedIdReferenceListField, self).__init__(**kwargs)

  def clean(self, encrypted_ids):
    encrypted_ids = super(LKEncryptedIdReferenceListField, self).clean(encrypted_ids)

    if encrypted_ids:
      encrypted_ids = encrypted_ids.split(',')
      instances = self.model_klass.find_by_encrypted_ids(encrypted_ids, for_update=self.for_update, **self.filter_params)
      if not all(instances):
        raise forms.ValidationError('Invalid reference; object not found.')

    else:
      instances = []

    return instances


class LKEncryptedIdReferenceField(LKEncryptedIdReferenceListField):
  def clean(self, encrypted_id):
    objs_list = super(LKEncryptedIdReferenceField, self).clean(encrypted_id)

    if objs_list:
      return objs_list[0]
    return None


class LKColorField(forms.RegexField):
  def __init__(self, **kwargs):
    kwargs['regex'] = r'^#[A-F0-9]{6}$'
    super(LKColorField, self).__init__(**kwargs)


class FieldsListForm(forms.Form):
  @classmethod
  def properties_to_model_properties(cls):
    props = {}
    for k, v in cls.declared_fields.items():
      dest_k = k
      if isinstance(v, LKEncryptedIdReferenceField):
        dest_k = dest_k[:-3] # strip off "_id" at the end
      props[k] = dest_k
    return props

  def cleaned_model_data(self, filter_values=None):
    return {v: self.cleaned_data.get(k) for k, v in self.properties_to_model_properties().items()
            if filter_values is None or k in filter_values}
