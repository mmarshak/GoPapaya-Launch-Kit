# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import bitfield.models
import backend.util.hstore_field
import backend.lk.models.sdkapp
import django.utils.timezone
import djorm_pgarray.fields
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('first_name', models.CharField(max_length=30, null=True, blank=True)),
                ('last_name', models.CharField(max_length=30, null=True, blank=True)),
                ('email', models.EmailField(max_length=75, unique=True, null=True)),
                ('phone', models.CharField(max_length=30, unique=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('delete_time', models.DateTimeField(null=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('app_versions', backend.util.hstore_field.HStoreField(null=True)),
                ('flags', bitfield.models.BitField([b'has_unverified_email', b'unsubscribed_from_email', b'any_reviews_ready', b'any_reviews_pending', b'has_reviews_onboarded', b'beta_optin', b'has_review_monitor', b'has_review_monitor_tweets', b'has_screenshot_builder', b'has_sales_monitor', b'has_sales_report_ready', b'has_sales_onboarded', b'has_websites', b'sent_beta_optin_email', b'has_super_users', b'has_config', b'has_sent_tracking_data'], default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreApp',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('itunes_id', models.CharField(unique=True, max_length=128)),
                ('bundle_id', models.CharField(unique=True, max_length=128)),
                ('app_info_ingestion_time', models.DateTimeField(null=True)),
                ('app_info_countries', djorm_pgarray.fields.TextArrayField(dbtype='text')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreAppInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('data', backend.util.hstore_field.HStoreField()),
                ('categories', djorm_pgarray.fields.IntegerArrayField()),
                ('screenshots', djorm_pgarray.fields.TextArrayField(dbtype='text')),
                ('ipad_screenshots', djorm_pgarray.fields.TextArrayField(dbtype='text')),
                ('release_date', models.DateTimeField()),
                ('country', models.CharField(max_length=2, null=True)),
                ('app', models.ForeignKey(related_name='+', to='lk.AppStoreApp', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreAppInterest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('country', models.CharField(max_length=2, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('enabled', models.BooleanField(default=False)),
                ('ready', models.BooleanField(default=False, db_index=True)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp')),
                ('user', models.ForeignKey(related_name='+', to='lk.User', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreAppRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('rating', models.FloatField()),
                ('reviews_count', models.PositiveIntegerField()),
                ('current_version_rating', models.FloatField()),
                ('current_version_reviews_count', models.PositiveIntegerField()),
                ('app', models.ForeignKey(related_name='+', to='lk.AppStoreApp', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreAppReviewTracker',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('country', models.CharField(max_length=2)),
                ('last_ingestion_time', models.DateTimeField(null=True)),
                ('latest_appstore_review_id', models.BigIntegerField(null=True)),
                ('failed_ingestion_attempts', models.IntegerField(default=0)),
                ('successful_ingestion_attempts', models.IntegerField(default=0)),
                ('has_had_full_ingestion', models.BooleanField(default=False)),
                ('app', models.ForeignKey(to='lk.AppStoreApp', on_delete=django.db.models.deletion.DO_NOTHING)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreReview',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('appstore_review_id', models.BigIntegerField(unique=True)),
                ('app_version', models.CharField(max_length=16)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('initial_ingestion', models.BooleanField(default=False)),
                ('author_reviewed_before', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=256)),
                ('body', models.TextField()),
                ('author_title', models.CharField(max_length=128)),
                ('author_id', models.CharField(max_length=16, db_index=True)),
                ('rating', models.PositiveIntegerField()),
                ('country', models.CharField(max_length=2)),
                ('app', models.ForeignKey(related_name='+', to='lk.AppStoreApp', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreReviewNotification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('data', backend.util.hstore_field.HStoreField()),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreReviewSubscription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('enabled', models.BooleanField(default=False)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('last_notification_time', models.DateTimeField(null=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('filter_app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreSalesReport',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('begin_date', models.DateField()),
                ('end_date', models.DateField()),
                ('product_type_identifier', models.CharField(max_length=20)),
                ('units', models.DecimalField(max_digits=18, decimal_places=2)),
                ('customer_currency', models.CharField(max_length=3)),
                ('country_code', models.CharField(max_length=2)),
                ('developer_proceeds', models.DecimalField(max_digits=18, decimal_places=2)),
                ('proceeds_currency', models.CharField(max_length=3)),
                ('provider', models.CharField(max_length=5)),
                ('provider_country', models.CharField(max_length=2)),
                ('sku', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=600)),
                ('version', models.CharField(max_length=100)),
                ('customer_price', models.DecimalField(max_digits=18, decimal_places=2)),
                ('promo_code', models.CharField(max_length=10)),
                ('subscription', models.CharField(max_length=10)),
                ('period', models.CharField(max_length=30)),
                ('parent_identifier', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=50)),
                ('cmb', models.CharField(max_length=5)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp')),
            ],
            options={
                'get_latest_by': 'end_date',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreSalesReportFetchedStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('report_date', models.DateField()),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('empty', models.BooleanField(default=False)),
                ('failed', models.BooleanField(default=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreSalesReportNotification',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('data', backend.util.hstore_field.HStoreField()),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppStoreSalesReportSubscription',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('latest_report_date', models.DateField(null=True)),
                ('enabled', models.BooleanField(default=False)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppWebsite',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('domain', models.CharField(max_length=100, unique=True, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('delete_time', models.DateTimeField(default=None, null=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppWebsitePage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slug', models.CharField(max_length=64)),
                ('title', models.CharField(max_length=128)),
                ('body', models.TextField()),
                ('website', models.ForeignKey(related_name='page', to='lk.AppWebsite', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppWebsiteScreenshot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('platform', models.CharField(max_length=15)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AppWebsiteView',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('host', models.CharField(max_length=64)),
                ('referer', models.URLField(null=True)),
                ('user_agent', models.CharField(max_length=256)),
                ('remote_ip', models.CharField(max_length=39, null=True)),
                ('path', models.CharField(max_length=256, null=True)),
                ('website', models.ForeignKey(related_name='+', to='lk.AppWebsite', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EmailToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('email', models.EmailField(max_length=75)),
                ('token', models.CharField(unique=True, max_length=64, blank=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('redemption_time', models.DateTimeField(null=True)),
                ('kind', models.CharField(max_length=32, choices=[(b'verify-email', b'Email Verification'), (b'password-reset', b'Password Reset'), (b'download-bundle', b'Download Bundle')])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('kind', models.CharField(max_length=32, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('ref_count', models.PositiveIntegerField(default=0)),
                ('deleted', models.BooleanField(default=False)),
                ('time_taken', models.DateTimeField(null=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ItunesConnectAccessToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('apple_id', models.EmailField(max_length=75)),
                ('token', models.CharField(max_length=512)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ItunesConnectVendor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=4000)),
                ('itc_id', models.CharField(max_length=10)),
                ('is_chosen', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('token', models.ForeignKey(related_name='vendors', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ItunesConnectAccessToken')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OAuthAccessToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('client_id', models.CharField(max_length=32, choices=[(b'launchkit-skit', b'Web'), (b'launchkit-test', b'Test Client')])),
                ('token', models.CharField(unique=True, max_length=66)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('last_used_time', models.DateTimeField(auto_now_add=True)),
                ('expire_time', models.DateTimeField(default=None, null=True, blank=True)),
                ('scope', models.CharField(max_length=32, choices=[(b'readonly', b'Read-Only'), (b'readwrite', b'Read/Write')])),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RuntimeConfigRule',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('sort_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True, null=True)),
                ('key', models.CharField(max_length=64)),
                ('kind', models.CharField(max_length=8, choices=[(b'string', b'String'), (b'int', b'Int'), (b'float', b'Float'), (b'bool', b'Bool')])),
                ('namespace', models.CharField(max_length=16, null=True)),
                ('bundle_id', models.CharField(max_length=256)),
                ('value', models.CharField(max_length=2048)),
                ('description', models.CharField(max_length=2048, null=True)),
                ('qualifiers', backend.util.hstore_field.HStoreField(null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RuntimeConfigRuleNamespace',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('update_time', models.DateTimeField(auto_now=True, auto_now_add=True, null=True)),
                ('bundle_id', models.CharField(max_length=256, null=True)),
                ('namespace', models.CharField(max_length=16, null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScreenshotBundle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('access_count', models.IntegerField(default=0)),
                ('last_accessed_time', models.DateTimeField(null=True)),
                ('import_time', models.DateTimeField(null=True, db_index=True)),
                ('hq', models.NullBooleanField()),
                ('upload_ids', djorm_pgarray.fields.TextArrayField(dbtype='text')),
                ('upload_names', djorm_pgarray.fields.TextArrayField(dbtype='text')),
                ('url', models.URLField(max_length=256, null=True)),
                ('size_bytes', models.BigIntegerField(default=0)),
                ('files_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScreenshotBundleImage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('filename', models.CharField(max_length=64)),
                ('image', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image')),
                ('screenshot_bundle', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ScreenshotBundle')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScreenshotSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('delete_time', models.DateTimeField(default=None, null=True)),
                ('name', models.CharField(max_length=128)),
                ('version', models.CharField(max_length=32)),
                ('shot_count', models.PositiveIntegerField()),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScreenshotShot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('config', backend.util.hstore_field.HStoreField(null=True)),
                ('background_image', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image', null=True)),
                ('screenshot_image', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image')),
                ('screenshot_set', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ScreenshotSet')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ScreenshotShotOverride',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('device_type', models.CharField(max_length=32)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('override_image', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image')),
                ('screenshot_set', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ScreenshotSet')),
                ('screenshot_shot', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ScreenshotShot')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKApp',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('latest_track_time', models.DateTimeField(null=True)),
                ('display_name', models.CharField(max_length=128, null=True)),
                ('bundle_id', models.CharField(max_length=128)),
                ('latest_debug_version', models.CharField(max_length=24, null=True)),
                ('latest_prod_version', models.CharField(max_length=24, null=True)),
                ('appstore_app_country', models.CharField(max_length=2, null=True)),
                ('super_config', djorm_pgarray.fields.TextArrayField(default=backend.lk.models.sdkapp._default_super_config, dbtype='text', null=False)),
                ('almost_config', djorm_pgarray.fields.TextArrayField(default=backend.lk.models.sdkapp._default_almost_config, dbtype='text', null=False)),
                ('products', backend.util.hstore_field.HStoreField(null=True)),
                ('appstore_app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp', null=True)),
                ('config_parent', models.ForeignKey(related_name='config_children', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKApp', null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKAppStat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('hour', models.DateTimeField()),
                ('data', backend.util.hstore_field.HStoreField()),
                ('app', models.ForeignKey(related_name='+', to='lk.SDKApp', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
                ('user', models.ForeignKey(related_name='+', to='lk.User', on_delete=django.db.models.deletion.DO_NOTHING, db_index=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKScreen',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKSession',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('last_upgrade_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_accessed_time', models.DateTimeField(auto_now_add=True)),
                ('app_version', models.CharField(max_length=32, null=True)),
                ('app_build', models.CharField(max_length=32, null=True)),
                ('app_build_debug', models.NullBooleanField()),
                ('sdk_platform', models.CharField(max_length=8, null=True)),
                ('sdk_version', models.CharField(max_length=32, null=True)),
                ('os', models.CharField(max_length=3, null=True)),
                ('os_version', models.CharField(max_length=16, null=True)),
                ('hardware', models.CharField(max_length=32, null=True)),
                ('screen_height', models.PositiveIntegerField(null=True)),
                ('screen_width', models.PositiveIntegerField(null=True)),
                ('screen_scale', models.FloatField(null=True)),
                ('screens', models.PositiveIntegerField(default=0)),
                ('taps', models.PositiveIntegerField(default=0)),
                ('visits', models.PositiveIntegerField(default=0)),
                ('seconds', models.PositiveIntegerField(default=0)),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKApp')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKSessionActivity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('kind', models.CharField(max_length=32)),
                ('data', backend.util.hstore_field.HStoreField()),
                ('session', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKSession')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKTap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('time', models.DateTimeField()),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('orient', models.CharField(max_length=1)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('last_used_time', models.DateTimeField(null=True)),
                ('expire_time', models.DateTimeField(null=True)),
                ('token', models.CharField(unique=True, max_length=44)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('last_accessed_time', models.DateTimeField(auto_now_add=True)),
                ('unique_id', models.CharField(max_length=128, null=True)),
                ('name', models.CharField(max_length=128, null=True)),
                ('email', models.CharField(max_length=128, null=True)),
                ('screens', models.PositiveIntegerField(default=0)),
                ('taps', models.PositiveIntegerField(default=0)),
                ('visits', models.PositiveIntegerField(default=0)),
                ('seconds', models.PositiveIntegerField(default=0)),
                ('days_active_map', models.BigIntegerField(default=0)),
                ('monthly_screens', models.PositiveIntegerField(default=0)),
                ('monthly_taps', models.PositiveIntegerField(default=0)),
                ('monthly_visits', models.PositiveIntegerField(default=0)),
                ('monthly_seconds', models.PositiveIntegerField(default=0)),
                ('monthly_days_active', models.PositiveIntegerField(default=0)),
                ('labels', djorm_pgarray.fields.TextArrayField(dbtype='text')),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKApp')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKUserIncrementLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField()),
                ('data', backend.util.hstore_field.HStoreField(null=True)),
                ('sdk_user', models.ForeignKey(to='lk.SDKUser', on_delete=django.db.models.deletion.DO_NOTHING)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKUserLabelChangeEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('kind', models.CharField(max_length=32, null=True)),
                ('label', models.CharField(max_length=32, null=True)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKApp')),
                ('sdk_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKUser')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SDKVisit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('os', models.CharField(max_length=3, null=True)),
                ('os_version', models.CharField(max_length=16, null=True)),
                ('hardware', models.CharField(max_length=32, null=True)),
                ('app_version', models.CharField(max_length=32, null=True)),
                ('app_build', models.CharField(max_length=32, null=True)),
                ('app_build_debug', models.NullBooleanField()),
                ('screen_height', models.PositiveIntegerField(null=True)),
                ('screen_width', models.PositiveIntegerField(null=True)),
                ('screen_scale', models.FloatField(null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('screens', models.PositiveIntegerField()),
                ('taps', models.PositiveIntegerField()),
                ('sdk_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKUser', null=True)),
                ('session', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKSession')),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SlackAccessToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('token', models.CharField(max_length=512, null=True)),
                ('scope', models.CharField(max_length=128)),
                ('webhook_data', backend.util.hstore_field.HStoreField(null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TwitterAccessToken',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('handle', models.CharField(max_length=15)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('invalidated_time', models.DateTimeField(null=True)),
                ('token', models.CharField(max_length=100)),
                ('token_secret', models.CharField(max_length=100)),
                ('user', models.ForeignKey(related_name='twitter_access_tokens_set', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TwitterAppConnection',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('handle', models.CharField(max_length=15)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('enabled', models.BooleanField(default=False)),
                ('app', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppStoreApp')),
                ('user', models.ForeignKey(related_name='twitter_app_connection_set', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('email', models.EmailField(unique=True, max_length=75)),
                ('primary', models.BooleanField(default=True)),
                ('verified', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('source_token', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lk.EmailToken', null=True)),
                ('user', models.ForeignKey(related_name='emails_set', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='slackaccesstoken',
            unique_together=set([('user', 'token')]),
        ),
        migrations.AlterUniqueTogether(
            name='sdkuser',
            unique_together=set([('app', 'unique_id')]),
        ),
        migrations.AddField(
            model_name='sdktap',
            name='visit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKVisit'),
            preserve_default=True,
        ),
        migrations.AlterIndexTogether(
            name='sdksessionactivity',
            index_together=set([('user', 'create_time')]),
        ),
        migrations.AddField(
            model_name='sdksession',
            name='sdk_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKUser', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='sdksession',
            name='user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User'),
            preserve_default=True,
        ),
        migrations.AlterIndexTogether(
            name='sdksession',
            index_together=set([('user', 'last_accessed_time')]),
        ),
        migrations.AddField(
            model_name='sdkscreen',
            name='visit',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.SDKVisit'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='sdkappstat',
            unique_together=set([('app', 'hour')]),
        ),
        migrations.AlterUniqueTogether(
            name='sdkapp',
            unique_together=set([('user', 'bundle_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='screenshotshotoverride',
            unique_together=set([('screenshot_shot', 'device_type')]),
        ),
        migrations.AddField(
            model_name='screenshotbundle',
            name='screenshot_set',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ScreenshotSet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='screenshotbundle',
            name='user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='runtimeconfigrulenamespace',
            unique_together=set([('user', 'bundle_id', 'namespace')]),
        ),
        migrations.AlterUniqueTogether(
            name='itunesconnectvendor',
            unique_together=set([('user', 'itc_id')]),
        ),
        migrations.AlterIndexTogether(
            name='appwebsiteview',
            index_together=set([('website', 'create_time')]),
        ),
        migrations.AddField(
            model_name='appwebsitescreenshot',
            name='image',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appwebsitescreenshot',
            name='website',
            field=models.ForeignKey(related_name='screenshots', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.AppWebsite', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='appwebsitepage',
            unique_together=set([('website', 'slug')]),
        ),
        migrations.AddField(
            model_name='appwebsite',
            name='background',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appwebsite',
            name='icon',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appwebsite',
            name='logo',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.Image', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appwebsite',
            name='user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appstoresalesreportfetchedstatus',
            name='vendor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ItunesConnectVendor'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='appstoresalesreportfetchedstatus',
            unique_together=set([('vendor', 'report_date')]),
        ),
        migrations.AddField(
            model_name='appstoresalesreport',
            name='vendor',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.ItunesConnectVendor'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appstorereviewsubscription',
            name='twitter_connection',
            field=models.OneToOneField(related_name='subscription', null=True, to='lk.TwitterAppConnection'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='appstorereviewsubscription',
            name='user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, to='lk.User'),
            preserve_default=True,
        ),
        migrations.AlterIndexTogether(
            name='appstorereview',
            index_together=set([('app', 'appstore_review_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='appstoreappreviewtracker',
            unique_together=set([('app', 'country')]),
        ),
        migrations.AlterIndexTogether(
            name='appstoreapprating',
            index_together=set([('app', 'create_time')]),
        ),
        migrations.AlterUniqueTogether(
            name='appstoreappinterest',
            unique_together=set([('user', 'app', 'country')]),
        ),
    ]
